generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String              @id @default(uuid()) @db.Uuid
  email               String              @unique
  name                String
  phone               String?
  type                UserType
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  contractor          Contractor?
  renovation_requests RenovationRequest[]
  reviews_given       Review[]            @relation("CustomerReviews")

  @@index([email])
  @@map("users")
}

model Contractor {
  id                      String               @id @default(uuid()) @db.Uuid
  user_id                 String               @unique @db.Uuid
  business_name           String?
  business_number         String?
  phone                   String?
  business_license_number String?
  insurance_document_url  String?
  wsib_certificate_url    String?
  insurance_verified      Boolean              @default(false)
  wsib_verified           Boolean              @default(false)
  service_areas           String[]
  categories              String[]
  rating                  Decimal              @default(0) @db.Decimal(3, 2)
  review_count            Int                  @default(0)
  profile_completed       Boolean              @default(false)
  completion_percentage   Int                  @default(0)
  skip_verification       Boolean              @default(false)
  onboarding_completed_at DateTime?
  created_at              DateTime             @default(now())
  updated_at              DateTime             @updatedAt
  bids                    Bid[]
  user                    User                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
  inspection_interests    InspectionInterest[] @relation("InspectionInterests")
  selected_requests       RenovationRequest[]  @relation("SelectedContractor")
  reviews                 Review[]

  @@index([user_id])
  @@index([service_areas])
  @@index([categories])
  @@index([profile_completed])
  @@map("contractors")
}

model RenovationRequest {
  id                     String               @id @default(uuid()) @db.Uuid
  customer_id            String               @db.Uuid
  property_type          PropertyType
  category               RenovationCategory
  budget_range           BudgetRange
  timeline               Timeline
  postal_code            String
  address                String
  description            String
  photos                 String[]
  status                 RequestStatus        @default(OPEN)
  created_at             DateTime             @default(now())
  inspection_date        DateTime?
  inspection_time        String?
  inspection_notes       String?
  bidding_start_date     DateTime?
  bidding_end_date       DateTime?
  selected_contractor_id String?              @db.Uuid
  bids                   Bid[]
  inspection_interests   InspectionInterest[]
  customer               User                 @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  selected_contractor    Contractor?          @relation("SelectedContractor", fields: [selected_contractor_id], references: [id])
  reviews                Review[]

  @@index([status, category])
  @@index([property_type])
  @@index([postal_code])
  @@index([created_at])
  @@index([inspection_date])
  @@index([bidding_start_date])
  @@map("renovation_requests")
}

model Bid {
  id             String            @id @default(cuid())
  request_id     String            @db.Uuid
  contractor_id  String            @db.Uuid
  labor_cost     Decimal           @default(0) @db.Decimal(10, 2)
  material_cost  Decimal           @default(0) @db.Decimal(10, 2)
  permit_cost    Decimal           @default(0) @db.Decimal(10, 2)
  disposal_cost  Decimal           @default(0) @db.Decimal(10, 2)
  total_amount   Decimal           @db.Decimal(10, 2)
  timeline_weeks Int               @default(4)
  start_date     DateTime          @default(now())
  included_items String?
  excluded_items String?
  notes          String?
  status         BidStatus         @default(PENDING)
  created_at     DateTime          @default(now())
  updated_at     DateTime          @updatedAt
  contractor     Contractor        @relation(fields: [contractor_id], references: [id], onDelete: Cascade)
  request        RenovationRequest @relation(fields: [request_id], references: [id], onDelete: Cascade)

  @@unique([request_id, contractor_id])
  @@index([status])
  @@index([contractor_id])
  @@index([created_at])
  @@map("bids")
}

model Review {
  id            String            @id @default(uuid()) @db.Uuid
  contractor_id String            @db.Uuid
  customer_id   String            @db.Uuid
  request_id    String            @db.Uuid
  rating        Int               @db.SmallInt
  comment       String?
  created_at    DateTime          @default(now())
  contractor    Contractor        @relation(fields: [contractor_id], references: [id], onDelete: Cascade)
  customer      User              @relation("CustomerReviews", fields: [customer_id], references: [id], onDelete: Cascade)
  request       RenovationRequest @relation(fields: [request_id], references: [id], onDelete: Cascade)

  @@unique([request_id, customer_id])
  @@index([contractor_id])
  @@index([rating])
  @@index([created_at])
  @@map("reviews")
}

model InspectionInterest {
  id               String            @id @default(uuid()) @db.Uuid
  request_id       String            @db.Uuid
  contractor_id    String            @db.Uuid
  will_participate Boolean
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  contractor       Contractor        @relation("InspectionInterests", fields: [contractor_id], references: [id], onDelete: Cascade)
  request          RenovationRequest @relation(fields: [request_id], references: [id], onDelete: Cascade)

  @@unique([request_id, contractor_id])
  @@index([request_id])
  @@index([contractor_id])
  @@index([will_participate])
  @@map("inspection_interests")
}

enum UserType {
  CUSTOMER
  CONTRACTOR
  ADMIN
}

enum PropertyType {
  DETACHED_HOUSE
  TOWNHOUSE
  CONDO
  COMMERCIAL
}

enum RenovationCategory {
  KITCHEN
  BATHROOM
  BASEMENT
  FLOORING
  PAINTING
  OTHER
  OFFICE
  RETAIL
  CAFE_RESTAURANT
  EDUCATION
  HOSPITALITY_HEALTHCARE
}

enum BudgetRange {
  UNDER_50K
  RANGE_50_100K
  OVER_100K
}

enum Timeline {
  ASAP
  WITHIN_1MONTH
  WITHIN_3MONTHS
  PLANNING
}

enum RequestStatus {
  OPEN
  INSPECTION_PENDING
  INSPECTION_SCHEDULED
  BIDDING_OPEN
  BIDDING_CLOSED
  CONTRACTOR_SELECTED
  CLOSED
  COMPLETED
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
}

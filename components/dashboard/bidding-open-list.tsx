'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { Card, CardContent } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { CountdownTimer } from '@/components/ui/countdown-timer'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { BidSubmissionModal, BidSubmissionData } from '@/components/contractor/bid-submission-modal'

interface BiddingRequest {
  id: string
  category: string
  budget_range: string
  postal_code: string
  address: string
  description: string
  inspection_date: string
  bidding_start_date: string
  bidding_end_date: string
  created_at: string
  customer: {
    name: string
  }
  _count: {
    bids: number
  }
  my_bid?: {
    id: string
    total_amount: number
    status: string
    created_at: string
  }
  average_bid?: {
    total_amount: number
  }
  bids?: {
    total_amount: number
  }[]
  status: string;
}

export function BiddingOpenList() {
  const [requests, setRequests] = useState<BiddingRequest[]>([])
  const [loading, setLoading] = useState(true)
  const [expandedRequests, setExpandedRequests] = useState<Set<string>>(new Set())
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [selectedRequest, setSelectedRequest] = useState<BiddingRequest | null>(null)
  const router = useRouter()
  const [isSubmitting, setIsSubmitting] = useState(false)

  useEffect(() => {
    fetchBiddingRequests()
  }, [])

  const fetchBiddingRequests = async () => {
    try {
      console.log('üîç Fetching bidding requests...')
      // Í≥µÍ∞ú APIÎ•º ÏÇ¨Ïö©ÌïòÏó¨ BIDDING_OPEN ÏÉÅÌÉúÏùò ÏöîÏ≤≠Îì§ÏùÑ Í∞ÄÏ†∏Ïò§Í∏∞
      const response = await fetch('/api/requests/public?status=BIDDING_OPEN')
      console.log('üì° Response status:', response.status)
      
      if (response.ok) {
        const data = await response.json()
        console.log('üì¶ API Response:', data)
        
        if (data.success && data.requests) {
          console.log('üìã Bidding requests:', data.requests)
          console.log('üìä Requests length:', data.requests.length)
          
          // üö® ÎîîÎ≤ÑÍπÖ: Í∞Å ÏöîÏ≤≠Ïùò my_bid ÏÉÅÌÉú ÌôïÏù∏
          console.log('üîç Checking my_bid status for each request:');
          data.requests.forEach((request: BiddingRequest, index: number) => {
            console.log(`Request ${index + 1}:`, {
              id: request.id,
              hasMyBid: !!request.my_bid,
              myBidData: request.my_bid,
              status: request.status
            });
          });
          
          // ‚úÖ Î™®Îì† ÌîÑÎ°úÏ†ùÌä∏Î•º ÌëúÏãú (ÏûÖÏ∞∞ Ïó¨Î∂ÄÏôÄ Í¥ÄÍ≥ÑÏóÜÏù¥)
          console.log('‚úÖ Displaying all requests:', data.requests.length);
          setRequests(data.requests);
        } else {
          console.log('‚ùå API response structure invalid:', data)
          setRequests([])
        }
      } else {
        console.error('‚ùå API response not ok:', response.status, response.statusText)
        const errorData = await response.json().catch(() => ({}))
        console.error('‚ùå Error details:', errorData)
      }
    } catch (error) {
      console.error('‚ùå Error fetching bidding requests:', error)
    } finally {
      setLoading(false)
    }
  }

  const formatCategory = (category: string): string => {
    return category.charAt(0) + category.slice(1).toLowerCase()
  }

  const formatBudgetRange = (range: string): string => {
    switch (range) {
      case 'UNDER_50K': return 'Under $50K'
      case 'RANGE_50_100K': return '$50K - $100K'
      case 'OVER_100K': return 'Over $100K'
      default: return range
    }
  }

  const formatDate = (dateString: string): string => {
    const date = new Date(dateString)
    return date.toLocaleDateString('en-CA', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    })
  }

  const calculateAverageBid = (bids: { total_amount: number }[]): number => {
    if (!bids || bids.length === 0) return 0
    const total = bids.reduce((sum, bid) => sum + bid.total_amount, 0)
    return Math.round(total / bids.length)
  }

  const getCategoryIcon = (category: string): string => {
    switch (category) {
      case 'KITCHEN': return 'üç≥'
      case 'BATHROOM': return 'üöø'
      case 'BASEMENT': return 'üè†'
      case 'FLOORING': return 'üèóÔ∏è'
      case 'PAINTING': return 'üé®'
      case 'OTHER': return 'üîß'
      default: return 'üìã'
    }
  }

  const getTimeAgo = (dateString: string): string => {
    const date = new Date(dateString);
    const seconds = Math.floor((Date.now() - date.getTime()) / 1000);

    if (seconds < 60) {
      return `${seconds}Ï¥à Ï†Ñ`;
    } else if (seconds < 3600) {
      return `${Math.floor(seconds / 60)}Î∂Ñ Ï†Ñ`;
    } else if (seconds < 86400) {
      return `${Math.floor(seconds / 3600)}ÏãúÍ∞Ñ Ï†Ñ`;
    } else {
      return `${Math.floor(seconds / 86400)}Ïùº Ï†Ñ`;
    }
  };


  const handleSubmitBid = (request: BiddingRequest) => {
    setSelectedRequest(request)
    setIsModalOpen(true)
  }

  const handleBidSubmission = async (bidData: { bidAmount: string; file?: File; message: string; }) => {
    try {
      setIsSubmitting(true);
      
      // ÏûÖÏ∞∞ Í∏àÏï° Í≤ÄÏ¶ù
      const cleanAmount = bidData.bidAmount.replace(/[^\d]/g, '');
      if (!cleanAmount || parseInt(cleanAmount) <= 0) {
        alert('Ïú†Ìö®Ìïú ÏûÖÏ∞∞ Í∏àÏï°ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
        return;
      }

      // ÌîÑÎ°úÏ†ùÌä∏ ID ÌôïÏù∏
      if (!selectedRequest?.id) {
        alert('ÌîÑÎ°úÏ†ùÌä∏Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
        return;
      }

      // ÌîÑÎ°úÏ†ùÌä∏ ÏÉÅÌÉú ÌôïÏù∏ - ÏûÖÏ∞∞ Í∞ÄÎä•Ìïú ÏÉÅÌÉúÏù∏ÏßÄ Í≤ÄÏ¶ù
      console.log('üîç Checking project status for bidding:', {
        projectId: selectedRequest.id,
        status: selectedRequest.status,
        allowedStatuses: ['BIDDING_OPEN']
      });
      
      if (selectedRequest.status !== 'BIDDING_OPEN') {
        console.log('‚ùå Project status not allowed for bidding:', selectedRequest.status);
        
        const statusMessages = {
          'OPEN': 'Í≤¨Ï†ÅÏöîÏ≤≠ Îì±Î°ù ÏÉÅÌÉúÏûÖÎãàÎã§. ÏïÑÏßÅ ÏûÖÏ∞∞Ïù¥ ÏãúÏûëÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.',
          'INSPECTION_PENDING': 'ÌòÑÏû•Î∞©Î¨∏ ÎåÄÍ∏∞ Ï§ëÏù∏ ÌîÑÎ°úÏ†ùÌä∏ÏûÖÎãàÎã§. ÏûÖÏ∞∞Ïù¥ Î∂àÍ∞ÄÎä•Ìï©ÎãàÎã§.',
          'INSPECTION_SCHEDULED': 'ÌòÑÏû•Î∞©Î¨∏ ÏùºÏ†ïÏù¥ ÏÑ§Ï†ïÎêú ÌîÑÎ°úÏ†ùÌä∏ÏûÖÎãàÎã§. ÏûÖÏ∞∞Ïù¥ Î∂àÍ∞ÄÎä•Ìï©ÎãàÎã§.',
          'BIDDING_CLOSED': 'ÏûÖÏ∞∞Ïù¥ ÎßàÍ∞êÎêú ÌîÑÎ°úÏ†ùÌä∏ÏûÖÎãàÎã§. ÏûÖÏ∞∞Ïù¥ Î∂àÍ∞ÄÎä•Ìï©ÎãàÎã§.',
          'CONTRACTOR_SELECTED': 'ÏóÖÏ≤¥Í∞Ä ÏÑ†ÌÉùÎêú ÌîÑÎ°úÏ†ùÌä∏ÏûÖÎãàÎã§. ÏûÖÏ∞∞Ïù¥ Î∂àÍ∞ÄÎä•Ìï©ÎãàÎã§.',
          'CLOSED': 'ÎßàÍ∞êÎêú ÌîÑÎ°úÏ†ùÌä∏ÏûÖÎãàÎã§. ÏûÖÏ∞∞Ïù¥ Î∂àÍ∞ÄÎä•Ìï©ÎãàÎã§.',
          'COMPLETED': 'ÏôÑÎ£åÎêú ÌîÑÎ°úÏ†ùÌä∏ÏûÖÎãàÎã§. ÏûÖÏ∞∞Ïù¥ Î∂àÍ∞ÄÎä•Ìï©ÎãàÎã§.'
        };
        
        const message = statusMessages[selectedRequest.status as keyof typeof statusMessages] || 
                       `ÌîÑÎ°úÏ†ùÌä∏ ÏÉÅÌÉú(${selectedRequest.status})Î°ú Ïù∏Ìï¥ ÏûÖÏ∞∞Ïù¥ Î∂àÍ∞ÄÎä•Ìï©ÎãàÎã§.`;
        
        console.log('üö´ Bidding blocked:', message);
        alert(message);
        return;
      }
      
      console.log('‚úÖ Project status allows bidding:', selectedRequest.status);

      let estimateFileUrl = '';
      // ÌååÏùºÏù¥ ÏûàÎäî Í≤ΩÏö∞ÏóêÎßå ÏóÖÎ°úÎìú ÏãúÎèÑ
      if (bidData.file) {
        try {
          console.log('Uploading file...', bidData.file.name);
          estimateFileUrl = await uploadEstimateFile(bidData.file, selectedRequest.id);
          console.log('File uploaded successfully:', estimateFileUrl);
        } catch (error) {
          console.error('File upload failed:', error);
          alert('ÌååÏùº ÏóÖÎ°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. ÌååÏùº ÏóÜÏù¥ ÏûÖÏ∞∞ÏùÑ ÏßÑÌñâÌï©ÎãàÎã§.');
          estimateFileUrl = '';
        }
      }

      // Í∞ÑÏÜåÌôîÎêú ÏûÖÏ∞∞ Îç∞Ïù¥ÌÑ∞
      const bidSubmissionData = {
        request_id: selectedRequest.id,
        total_amount: parseInt(cleanAmount),
        estimate_file_url: estimateFileUrl || '',
        notes: bidData.message.trim() || '',
        timeline_weeks: 4,
        start_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
      };

      // üö® ÎîîÎ≤ÑÍπÖ: Î≥¥ÎÇ¥Îäî Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
      console.log('=== DEBUGGING BID SUBMISSION ===');
      console.log('selectedProject:', selectedRequest);
      console.log('cleanAmount:', cleanAmount, typeof cleanAmount);
      console.log('bidSubmissionData:', JSON.stringify(bidSubmissionData, null, 2));
      console.log('================================');

      // ÏûÖÏ∞∞ Ï†úÏ∂ú API Ìò∏Ï∂ú
      const response = await fetch('/api/bids', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(bidSubmissionData),
      });

      const result = await response.json();
      
      // üö® ÎîîÎ≤ÑÍπÖ: ÏùëÎãµ Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
      console.log('=== API RESPONSE DEBUG ===');
      console.log('Response status:', response.status);
      console.log('Response data:', JSON.stringify(result, null, 2));
      
      // Validation failed ÏóêÎü¨Ïùò details ÏûêÏÑ∏Ìûà Ï∂úÎ†•
      if (result.error === 'Validation failed' && result.details) {
        console.log('=== VALIDATION ERRORS ===');
        if (Array.isArray(result.details)) {
          result.details.forEach((error: any, index: number) => {
            console.log(`Error ${index + 1}:`, {
              field: error.path?.join('.') || 'unknown',
              message: error.message,
              code: error.code,
              received: error.received,
              expected: error.expected
            });
          });
        } else {
          console.log('Details object:', result.details);
        }
        console.log('=========================');
      }
      console.log('=========================');

      if (!response.ok) {
        console.error('Bid submission failed:', result);
        
        // ÏÉÅÏÑ∏ ÏóêÎü¨ Î©îÏãúÏßÄ ÌëúÏãú
        let errorMessage = 'Bid submission failed';
        if (result.details && Array.isArray(result.details)) {
          const fieldErrors = result.details.map((err: any) => 
            `${err.path?.join('.') || 'field'}: ${err.message}`
          ).join('\n');
          errorMessage = `ÏûÖÎ†• Ïò§Î•ò:\n${fieldErrors}`;
          
          // ÏÇ¨Ïö©ÏûêÏóêÍ≤å Íµ¨Ï≤¥Ï†ÅÏù∏ ÏóêÎü¨ Î≥¥Ïó¨Ï£ºÍ∏∞
          alert(errorMessage);
          return;
        } else if (result.error) {
          errorMessage = result.error;
        }
        
        throw new Error(errorMessage);
      }

      // ‚úÖ HTTP ÏÉÅÌÉú ÏΩîÎìúÎ°ú ÏÑ±Í≥µ/Ïã§Ìå® ÌåêÎã®
      if (response.ok) {
        console.log('‚úÖ Bid submitted successfully!');
        alert('ÏûÖÏ∞∞Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†úÏ∂úÎêòÏóàÏäµÎãàÎã§!');
        setIsModalOpen(false);
        
        // Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
        await fetchBiddingRequests();
      } else {
        console.error('‚ùå Bid submission failed:', result);
        throw new Error(result.error || 'ÏûÖÏ∞∞ Ï†úÏ∂úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }

    } catch (error) {
      console.error('Bid submission error:', error);
      alert(`ÏûÖÏ∞∞ Ï†úÏ∂ú Ïã§Ìå®: ${error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`);
    } finally {
      setIsSubmitting(false);
    }
  };

  const uploadEstimateFile = async (file: File, projectId: string): Promise<string> => {
    try {
      console.log('Starting file upload:', {
        fileName: file.name,
        fileSize: file.size,
        fileType: file.type,
        projectId: projectId
      })

      // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï∏° ÌååÏùº Í≤ÄÏ¶ù
      if (file.size > 10 * 1024 * 1024) {
        throw new Error('ÌååÏùº ÌÅ¨Í∏∞Í∞Ä 10MBÎ•º Ï¥àÍ≥ºÌï©ÎãàÎã§.')
      }

      const allowedTypes = [
        'application/pdf',
        'application/msword',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'image/jpeg',
        'image/png'
      ]
      
      if (!allowedTypes.includes(file.type)) {
        throw new Error('ÏßÄÏõêÌïòÏßÄ ÏïäÎäî ÌååÏùº ÌòïÏãùÏûÖÎãàÎã§. PDF, DOC, DOCX, JPG, PNGÎßå ÌóàÏö©Îê©ÎãàÎã§.')
      }

      const formData = new FormData()
      formData.append('file', file)
      formData.append('projectId', projectId)
      
      console.log('Sending file upload request...')
      
      const response = await fetch('/api/upload/estimate-file', {
        method: 'POST',
        body: formData,
      })
      
      if (!response.ok) {
        const errorData = await response.json()
        console.error('File upload failed:', errorData)
        throw new Error(errorData.error || 'ÌååÏùº ÏóÖÎ°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
      }
      
      const data = await response.json()
      console.log('File upload successful:', data)
      
      return data.fileUrl
      
    } catch (error) {
      console.error('File upload error:', error)
      throw error
    }
  }

  const toggleDetails = (requestId: string) => {
    setExpandedRequests(prev => {
      const newSet = new Set(prev)
      if (newSet.has(requestId)) {
        newSet.delete(requestId)
      } else {
        newSet.add(requestId)
      }
      return newSet
    })
  }

  if (loading) {
    return (
      <div className="space-y-4">
        {[1, 2, 3].map((i) => (
          <Card key={i} className="animate-pulse">
            <CardContent className="p-6">
              <div className="h-4 bg-gray-200 rounded w-1/4 mb-2"></div>
              <div className="h-4 bg-gray-200 rounded w-3/4 mb-4"></div>
              <div className="h-4 bg-gray-200 rounded w-1/2"></div>
            </CardContent>
          </Card>
        ))}
      </div>
    )
  }

  console.log('üîÑ Rendering BiddingOpenList component')
  console.log('üìä Current requests state:', requests)
  console.log('üìä Loading state:', loading)
  
  if (requests.length === 0) {
    return (
      <Card>
        <CardContent className="p-8 text-center">
          <div className="text-gray-400 text-4xl mb-4">üéØ</div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">ÏûÖÏ∞∞ ÏßÑÌñâÏ§ëÏù∏ ÏöîÏ≤≠Ïù¥ ÏóÜÏäµÎãàÎã§</h3>
          <p className="text-gray-600">ÌòÑÏû• Î∞©Î¨∏ÏùÑ ÏôÑÎ£åÌïú ÌîÑÎ°úÏ†ùÌä∏Ïóê ÎåÄÌïú ÏûÖÏ∞∞Ïù¥ ÏãúÏûëÎêòÎ©¥ Ïó¨Í∏∞Ïóê ÌëúÏãúÎê©ÎãàÎã§.</p>
        </CardContent>
      </Card>
    )
  }

  return (
    <div className="space-y-4">
      {/* ÏïàÎÇ¥ Î©îÏãúÏßÄ */}
      <Alert>
        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <AlertDescription>
          ÌòÑÏû• Î∞©Î¨∏ÏùÑ ÏôÑÎ£åÌïòÍ≥† ÏûÖÏ∞∞Ïù¥ ÏßÑÌñâ Ï§ëÏù∏ ÌîÑÎ°úÏ†ùÌä∏Îì§ÏûÖÎãàÎã§. ÎßàÍ∞ê ÏãúÍ∞Ñ Ï†ÑÏóê Í≤ΩÏüÅÎ†• ÏûàÎäî Í≤¨Ï†ÅÏùÑ Ï†úÏ∂úÌïòÏÑ∏Ïöî.
        </AlertDescription>
      </Alert>

      {/* ÏöîÏ≤≠ Î™©Î°ù */}
      {requests.map((request) => {
        const hasBid = !!request.my_bid

        return (
          <Card key={request.id} className="hover:shadow-md transition-shadow">
            <CardContent className="p-6">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  {/* ÌîÑÎ°úÏ†ùÌä∏ Ìó§Îçî */}
                  <div className="flex items-center space-x-3 mb-3">
                    <span className="text-2xl">{getCategoryIcon(request.category)}</span>
                    <div className="flex-1">
                      <h3 className="font-semibold text-lg text-gray-900">
                        {formatCategory(request.category)} Î¶¨ÎÖ∏Î≤†Ïù¥ÏÖò
                      </h3>
                      <p className="text-sm text-gray-600">by {request.customer.name}</p>
                      {/* ÌîÑÎ°úÏ†ùÌä∏ ÏÉÅÌÉú ÌëúÏãú */}
                      <div className="flex items-center space-x-2 mt-1">
                        <Badge 
                          variant={request.status === 'BIDDING_OPEN' ? 'default' : 'secondary'}
                          className={`text-xs ${
                            request.status === 'BIDDING_OPEN'
                              ? 'bg-green-100 text-green-800 border-green-200' 
                              : 'bg-gray-100 text-gray-800 border-gray-200'
                          }`}
                        >
                          {request.status === 'OPEN' && 'Í≤¨Ï†ÅÏöîÏ≤≠ Îì±Î°ù'}
                          {request.status === 'BIDDING_OPEN' && 'ÏûÖÏ∞∞ ÏßÑÌñâÏ§ë'}
                          {request.status === 'INSPECTION_PENDING' && 'ÌòÑÏû•Î∞©Î¨∏ ÎåÄÍ∏∞'}
                          {request.status === 'INSPECTION_SCHEDULED' && 'ÌòÑÏû•Î∞©Î¨∏ ÏòàÏ†ï'}
                          {request.status === 'BIDDING_CLOSED' && 'ÏûÖÏ∞∞ ÎßàÍ∞ê'}
                          {request.status === 'CONTRACTOR_SELECTED' && 'ÏóÖÏ≤¥ ÏÑ†ÌÉùÎê®'}
                          {request.status === 'CLOSED' && 'ÎßàÍ∞êÎê®'}
                          {request.status === 'COMPLETED' && 'ÏôÑÎ£åÎê®'}
                        </Badge>
                        {request.status === 'BIDDING_OPEN' && (
                          <span className="text-xs text-green-600 font-medium">‚úì ÏûÖÏ∞∞ Í∞ÄÎä•</span>
                        )}
                        {request.status === 'OPEN' && (
                          <span className="text-xs text-gray-600 font-medium">‚è≥ ÏûÖÏ∞∞ ÎåÄÍ∏∞</span>
                        )}
                      </div>
                    </div>
                    {hasBid && (
                      <Badge className="bg-blue-100 text-blue-800">
                        ‚úÖ ÏûÖÏ∞∞ ÏôÑÎ£å
                      </Badge>
                    )}
                  </div>

                  {/* ÏûÖÏ∞∞ Ï†ïÎ≥¥ ÏÑπÏÖò */}
                  <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-xl p-6 mb-6 shadow-sm">
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                      {/* ÎÇ®ÏùÄ ÏãúÍ∞Ñ ÌÉÄÏûÑÎ®∏ */}
                      <div className="text-center group">
                        <div className="inline-flex items-center justify-center p-3 bg-blue-100 rounded-full mb-3 group-hover:bg-blue-200 transition-colors">
                          <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                        </div>
                        <h4 className="text-base font-semibold text-blue-900 mb-3">ÎÇ®ÏùÄ ÏãúÍ∞Ñ</h4>
                        <div className="bg-white rounded-lg p-3 border border-blue-100 shadow-sm">
                          {(() => {
                            const deadline = new Date(request.bidding_end_date);
                            return isNaN(deadline.getTime()) ? (
                              <div className="text-red-500">Invalid date</div>
                            ) : (
                              <CountdownTimer 
                                deadline={deadline}
                                className="justify-center"
                              />
                            );
                          })()}
                        </div>
                      </div>

                      {/* ÏûÖÏ∞∞ Ïàò Ï†ïÎ≥¥ */}
                      <div className="text-center group">
                        <div className="inline-flex items-center justify-center p-3 bg-indigo-100 rounded-full mb-3 group-hover:bg-indigo-200 transition-colors">
                          <svg className="w-6 h-6 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                          </svg>
                        </div>
                        <h4 className="text-base font-semibold text-blue-900 mb-3">ÏûÖÏ∞∞ Ïàò</h4>
                        <div className="bg-white rounded-lg p-3 border border-indigo-100 shadow-sm">
                          <p className="text-3xl font-bold text-indigo-800">
                            {request._count.bids}
                          </p>
                        </div>
                      </div>

                      {/* ÌèâÍ∑† Í∞ÄÍ≤© Ï†ïÎ≥¥ */}
                      <div className="text-center group">
                        <div className="inline-flex items-center justify-center p-3 bg-emerald-100 rounded-full mb-3 group-hover:bg-emerald-200 transition-colors">
                          <svg className="w-6 h-6 text-emerald-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0-2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
                          </svg>
                        </div>
                        <h4 className="text-base font-semibold text-blue-900 mb-3">ÌèâÍ∑† Í∞ÄÍ≤©</h4>
                        <div className="bg-white rounded-lg p-3 border border-emerald-100 shadow-sm">
                          <p className="text-3xl font-bold text-emerald-800">
                            ${calculateAverageBid(request.bids || []).toLocaleString()}
                          </p>
                        </div>
                      </div>
                    </div>
                    
                    {/* ÏûÖÏ∞∞ ÏÉÅÌÉú ÌëúÏãú */}
                    {hasBid && request.my_bid && (
                      <div className="mt-4 text-center">
                        <Badge className="bg-blue-100 text-blue-800 border-blue-200">
                          üïê ÏûÖÏ∞∞ ÏÉÅÌÉú: {request.my_bid.status === 'PENDING' ? 'Pending' : request.my_bid.status}
                        </Badge>
                        <p className="text-sm text-blue-700 mt-1">
                          ÏûÖÏ∞∞ Ï†úÏ∂ú ÏôÑÎ£å - Ïã¨ÏÇ¨ ÏßÑÌñâ Ï§ë
                        </p>
                      </div>
                    )}
                  </div>

                  {/* ÌîÑÎ°úÏ†ùÌä∏ Ï†ïÎ≥¥ - ÌÜ†Í∏Ä ÏïàÏúºÎ°ú Ïù¥Îèô */}
                  {/* <div className="grid grid-cols-3 gap-4 mb-4">
                    <div>
                      <p className="text-xs text-gray-500 font-medium">ÏòàÏÇ∞</p>
                      <Badge variant="secondary" className="mt-1">
                        {formatBudgetRange(request.budget_range)}
                      </Badge>
                    </div>
                    <div>
                      <p className="text-xs text-gray-500 font-medium">ÏúÑÏπò</p>
                      <p className="text-sm font-medium text-gray-900">{request.postal_code}</p>
                    </div>
                    <div>
                      <p className="text-xs text-gray-500 font-medium">ÌòÑÏû• Î∞©Î¨∏</p>
                      <p className="text-sm font-medium text-gray-900">
                        {formatDate(request.inspection_date)}
                      </p>
                    </div>
                  </div> */}

                  {/* ÎÇ¥ ÏûÖÏ∞∞ Ï†ïÎ≥¥ */}
                  {hasBid && request.my_bid && (
                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-sm font-medium text-blue-900">ÎÇ¥ ÏûÖÏ∞∞Í∞Ä</p>
                          <p className="text-lg font-bold text-blue-800">
                            ${request.my_bid.total_amount.toLocaleString()}
                          </p>
                        </div>
                        <div className="text-right">
                          <p className="text-sm text-blue-700">
                            Ï†úÏ∂úÏùº: {formatDate(request.my_bid.created_at)}
                          </p>
                          <Badge variant="secondary" className="mt-1">
                            {request.my_bid.status === 'PENDING' ? 'Ïã¨ÏÇ¨Ï§ë' : request.my_bid.status}
                          </Badge>
                        </div>
                      </div>
                    </div>
                  )}

                  <p className="text-sm text-gray-700 line-clamp-2">
                    {request.description}
                  </p>

                  {/* ÏÉÅÏÑ∏ Ï†ïÎ≥¥ ÏÑπÏÖò */}
                  {expandedRequests.has(request.id) && (
                    <div className="mt-4 p-4 bg-gray-50 rounded-lg border">
                      <h4 className="font-medium text-gray-900 mb-3">ÏÉÅÏÑ∏ Ï†ïÎ≥¥</h4>
                      
                      {/* Budget, Location, Timeline, Posted Ï†ïÎ≥¥Î•º Ïó¨Í∏∞Î°ú Ïù¥Îèô */}
                      <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-4 p-3 bg-white rounded-lg border">
                        <div>
                          <p className="text-xs text-gray-500 font-medium">ÏòàÏÇ∞</p>
                          <Badge variant="secondary" className="mt-1">
                            {formatBudgetRange(request.budget_range)}
                          </Badge>
                        </div>
                        <div>
                          <p className="text-xs text-gray-500 font-medium">ÏúÑÏπò</p>
                          <p className="text-sm font-medium text-gray-900">{request.postal_code}</p>
                        </div>
                        <div>
                          <p className="text-xs text-gray-500 font-medium">Í≤åÏãúÏùº</p>
                          <p className="text-sm font-medium text-gray-900">
                            {getTimeAgo(request.created_at)}
                          </p>
                        </div>
                      </div>
                      
                      <div className="space-y-2 text-sm text-gray-700">
                        <p><span className="font-medium">ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Î™Ö:</span> {request.description}</p>
                        <p><span className="font-medium">Ï£ºÏÜå:</span> {request.address}</p>
                        <p><span className="text-gray-500">ÏÉùÏÑ±Ïùº:</span> {formatDate(request.created_at)}</p>
                        <p><span className="font-medium">ÌòÑÏû¨ ÏûÖÏ∞∞ Ïàò:</span> {request._count.bids}Í∞ú</p>
                        {request.bids && request.bids.length > 0 && (
                          <p><span className="font-medium">ÌòÑÏû¨ ÌèâÍ∑† ÏûÖÏ∞∞Í∞Ä:</span> ${calculateAverageBid(request.bids).toLocaleString()}</p>
                        )}
                      </div>
                    </div>
                  )}
                </div>

                {/* Ïï°ÏÖò Î≤ÑÌäº */}
                <div className="ml-4 flex flex-col space-y-2">
                  <Button 
                    onClick={() => handleSubmitBid(request)}
                    disabled={request.status !== 'BIDDING_OPEN'}
                    className={`${
                      hasBid 
                        ? "bg-blue-600 hover:bg-blue-700" 
                        : request.status === 'BIDDING_OPEN'
                          ? "bg-green-600 hover:bg-green-700"
                          : "bg-gray-400 cursor-not-allowed"
                    }`}
                    title={
                      request.status !== 'BIDDING_OPEN'
                        ? request.status === 'OPEN' 
                          ? 'ÏïÑÏßÅ ÏûÖÏ∞∞Ïù¥ ÏãúÏûëÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. Í≤¨Ï†ÅÏöîÏ≤≠ Îì±Î°ù ÏÉÅÌÉúÏûÖÎãàÎã§.'
                          : `ÌòÑÏû¨ ÏÉÅÌÉú(${request.status})Î°úÎäî ÏûÖÏ∞∞Ïù¥ Î∂àÍ∞ÄÎä•Ìï©ÎãàÎã§.`
                        : hasBid ? 'ÏûÖÏ∞∞ ÏàòÏ†ï' : 'ÏûÖÏ∞∞ Ï†úÏ∂ú'
                    }
                  >
                    {hasBid ? 'ÏûÖÏ∞∞ ÏàòÏ†ï' : 'ÏûÖÏ∞∞ Ï†úÏ∂ú'}
                  </Button>
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={() => toggleDetails(request.id)}
                  >
                    {expandedRequests.has(request.id) ? 'Ï†ëÍ∏∞' : 'ÏÉÅÏÑ∏Î≥¥Í∏∞'}
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        )
      })}

      {/* ÏûÖÏ∞∞ Ï†úÏ∂ú Î™®Îã¨ */}
      {selectedRequest && (
        <BidSubmissionModal
          isOpen={isModalOpen}
          onClose={() => setIsModalOpen(false)}
          projectId={selectedRequest.id}
          projectTitle={`${formatCategory(selectedRequest.category)} Î¶¨ÎÖ∏Î≤†Ïù¥ÏÖò`}
          onSubmit={handleBidSubmission}
          isLoading={isSubmitting}
        />
      )}
    </div>
  )
}
